#!/usr/bin/python3
import re
import argparse
import sys
import os.path
import json
import subprocess


def sanitize_string(text=''):
    return text.replace(' ', '_') \
        .replace('/', '_') \
        .replace('(', '_') \
        .replace(')', '_') \
        .replace('\r', '').upper()

# Get the file name as a positional agrument from the command line
parser = argparse.ArgumentParser(
    description='Process the RNDC statistics file generated by the BIND9 name resolver')
parser.add_argument("-q", "--query")
parser.add_argument("-m", "--measurement")
parser.add_argument("-z", "--zone")
parser.add_argument("-d", "--domains", action="store_true")
parser.add_argument("file")
args = parser.parse_args()

if (args.domains and
    (args.query is not None or
     args.zone is not None or
     args.measurement is not None or
     args.trapper)):
    parser.error(
        'The --domain (-d) option cannot be used with any other argument.')

# Getting
stats_file = args.file

# Check if the file exists
if not os.path.isfile(stats_file):
    print("The RNDC stats file does not exists.")
    sys.exit()

# Open the file
fstat = open(stats_file, "r")
fstat_read = fstat.readlines()

header = ''
view = ''
item = ''
content = ''
content_out = ''
general_stats = []
zone_list = []
zone_stats = []

# Processing each line
for line in fstat_read:
    # Section headers ( ++ HEADER ++ )
    match = re.search(r'^\+\+ ([\s\w\/]+) \+\+$', line)
    if match:
        header = match.group(1).replace('/', '')
        header = sanitize_string(header)
        view = ''
        item = ''
        content = ''
        zone = ''
    # View group ( [View: VIEW_NAME] )
    match = re.search(r'^\[View: ([\w]+)(\s\(Cache:\s[\w]+\))?\]$', line)
    if match:
        view = match.group(1)

    # Ignore the _bind view
    if view == "_bind":
        continue

    # Classify data items into different groups (Zone specific items / General)
    if header == "PER_ZONE_QUERY_STATISTICS":
        # Per Zone stats
        # Current line is a zone name
        match = re.search(
            r'^\[((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9])\]$', line)
        if match:
            zone = match.group(1)
            zone_list.append((header, zone))
        # Current line is a (item / value) tuple
        match = re.search(r'^\s+(\d+)\s(.+)', line)
        if match:
            content = match.group(1)
            item = match.group(2)
            item = sanitize_string(item)
            zone_stats.append((header, zone, item, content))

    else:
        # Non-zoned statistics
        # Current line is a (item / value) tuple
        match = re.search(r'^\s+(\d+)\s(.+)', line)
        if match:
            content = match.group(1)
            item = match.group(2)
            item = sanitize_string(item)
            general_stats.append((view, header, item, content))

fstat.close()

content_out = 0
# Printing Measurements for Zones (q, z and m are defined)
if args.query and args.zone and args.measurement:
    for header, zone, item, content in zone_stats:
        if header == str(args.query) and \
                zone == str(args.zone) and \
                item == str(args.measurement):
            content_out = content
    print('{0}'.format(content_out))
# Printing general Measurements (q and m are defined)
elif args.query and args.measurement:
    for view, header, item, content in general_stats:
        if header == str(args.query) and \
                item == str(args.measurement):
            content_out = content
    print('{0}'.format(content_out))
# Printing domains in JSON format (only d is defined)
elif args.domains:
    domains = []
    for header, zone in zone_list:
        domains.append({"{#ZONE}": zone})
    print(json.dumps({'data': domains}))